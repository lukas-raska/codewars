Tom's n(2≤n≤2⋅10^5) goats each can produce milk at rates [a(0),a(1),...,a(n−1)] respectively with (1≤a(i)≤5⋅10^6) (in
liters per hour.) Because Tom boasts about having the most uniform goats in the world, he wants the goats to each have
a similar milk output. However, Tom is suspicious that one of his goats is either not keeping up with the rest of the
trip (group of goats) or is outpacing its peers.

In an upcoming milking contest, Tom displays his goats side by side in the same order as their milk-producing rates
appear in
a
a. However, he wants to remove a goat that does not fit in with the rest.

To determine the goat that does not fit, Tom looks at each group of x(2≤x≤n) consecutive goats, and wants to find a
goat such that it maximizes the absolute difference between the average milk outputs of the x consecutive goats and  the
 average milk outputs of the same x−1 goats but without it. Please help Tom find this goat and return the index that it
 appears in a (If multiple goats tie, return the minimum index.)

Sample Input & Output

uniformMilkOutput(int [] a, int x); // Input format
uniformMilkOutput(new int[] {4, 2, 9, 0, 8, 5, 2}, 3); // should return 3
uniformMilkOutput(new int[] {6, 1, 4, 2, 10, 10, 3}, 4); // should return 4
uniformMilkOutput(new int[] {5, 4, 12, 6, 14}, 2); // should return 1
uniformMilkOutput(new int[] {5, 12, 4, 6, 14}, 2); // should return 1
For the first test case,avg({9,0,8})=17/3,avg({9,8})=17/2 It can be shown that |17/3−17/2| is the largest absolute
difference when removing one goat, and the goat that is removed is has a milk output of 0 and an index of 3. In the
last case, removing either 12, 4, 6, or 14 all give the same result, but 12 appears first, so the result should be 1.

Note: be careful of double imprecision and look out for time complexity.